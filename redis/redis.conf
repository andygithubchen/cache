# Redis配置文件示例。
#
# 请注意，为了读取配置文件，Redis必须以文件路径作为第一个参数启动, 如：
# redis-server /path/to/redis.conf
# 注意单位：当需要内存大小时，可以以1k 5GB 4M的通常形式指定它：
#
# 1k  = > 1000 bytes
# 1kb = > 1024 bytes
# 1m  = > 1000000 bytes
# 1mb = > 1024*1024 bytes
# 1g  = > 1000000000 bytes
# 1gb = > 1024*1024*1024 bytes
#
# 单位不区分大小写，所以1GB 1Gb 1gB都是一样的。
# include /path/to/other.conf      # 引入其他配置文件，后面的覆盖前面的（可以把公用的独立出来）
# loadmodule /path/to/my_module.so # 启动时加载模块。 如果服务器无法加载模块，它将中止。 可以使用多个loadmodule指令。

# 网络配置 ===========================================================================================================================================
bind 127.0.0.1                  # 绑定允许链接redis服务的IP地址, 多个时这样: bind 192.168.1.100 10.0.0.1 ; 注释时表示任何机器都可以链接（不安全）
protected-mode yes              # 开启保护模式。 当redis没有配置密码,也没有用“bind”绑定IP时，redis服务器只接受从IPv4和IPv6环回地址127.0.0.1和:: 1以及Unix域套接字连接的客户端的连接。
port 6379                       # 接受指定端口的连接，默认为6379（IANA＃815344）。 如果指定端口0，Redis将不会在TCP套接字上侦听。
tcp-backlog 511                 # 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。)
#unixsocket /tmp/redis.sock     # 指定将用于侦听传入连接的Unix套接字的路径。 没有默认值，所以当没有指定时，Redis不会在unix套接字上侦听。
#unixsocketperm 700             # 配置unix socket使用文件的权限
timeout 0                       # 客户端和Redis服务端的连接超时时间，默认是0，表示永不超时。
tcp-keepalive 300               # 如果值非0，单位是秒，表示将周期性的使用SO_KEEPALIVE检测客户端是否还处于健康状态，避免服务器一直阻塞， 从Redis 3.2.1版后，默认值为300秒

# 一般配置 ===========================================================================================================================================
daemonize yes                   # 默认情况下，Redis不作为守护进程运行。 如果需要，请使用“yes”。 请注意，当守护程序时，Redis会在/var/run/redis.pid中写入一个pid文件。
supervised no                   # 可以通过upstart和systemd管理Redis守护进程。 supervised no (没有监督互动); supervised upstart (通过将Redis置于SIGSTOP模式来启动信号); supervised systemd (signal systemd将READY = 1写入$ NOTIFY_SOCKET); supervised auto (检测upstart或systemd方法基于 UPSTART_JOB或NOTIFY_SOCKET环境变量)。
pidfile /var/run/redis_6379.pid # 指定存储Redis进程号的文件路径, 默认： "/var/run/redis.pid".
loglevel notice                 # Redis总共支持四个日志级别：debug、verbose、notice、warning。 Debug：记录很多信息，用于开发和测试； Varbose：有用的信息，不像debug会记录那么多； Notice：普通的verbose，常用于生产环境； Warning：只有非常重要或者严重的信息会记录到日志； 默认是notice级别。
logfile ""                      # 日志的存储路径
#syslog-enabled no              # 要启用日志记录到系统记录器，只需将其设置为yes，并可选择更新其他syslog参数以满足您的需要。
#syslog-ident redis             # 指定syslog身份。
#syslog-facility local0         # 指定syslog工具。 必须是USER或LOCAL0-LOCAL7之间。
databases 16                    # 设置数据库的数量。默认值为16, 默认数据库为DB 0，您可以使用SELECT <dbid>在每个连接的基础上选择其他数据库，其中dbid是0和15之间的数字
always-show-logo yes            # 默认情况下，Redis仅在开始登录到标准输出并且标准输出为TTY时显示ASCII艺术标志。 基本上这意味着通常只能在交互式会话中显示徽标。 但是，可以强制使用4.0之前的行为，并且始终在启动日志中显示ASCII艺术标志，方法是将以下选项设置为yes。

# 快照配置 ===========================================================================================================================================
save 900 1                      # 保存数据库快照信息到磁盘，900秒内至少有1个key被改变时，触发保存信息到磁盘的事件。
save 300 10                     # 保存数据库快照信息到磁盘，300秒内至少有10个key被改变时，触发保存信息到磁盘的事件。
save 60 10000                   # 保存数据库快照信息到磁盘，60秒内至少有10000个key被改变时，触发保存信息到磁盘的事件。
stop-writes-on-bgsave-error yes # 当持久化出现错误之后，是否继续提供写服务
rdbcompression yes              # 持久化到RDB文件时，是否压缩，“yes”为压缩，“no”则反之
rdbchecksum yes                 # 读取和写入的时候是否支持CRC64校验，默认是开启的
dbfilename dump.rdb             # 镜像文件的名字
dir /usr/local/redis/           # 当前工作目录，配置文件和镜像文件等都在此目录下

# 主从配置 ===========================================================================================================================================
#slaveof <masterip> <masterport> # 分布式布置，主从复制
#masterauth <master-password>    # 设置访问master服务器的密码
slave-serve-stale-data yes       # 当slave服务器和master服务器失去连接后，或者当数据正在复制传输的时候，如果此参数值设置“yes”，slave服务器可以继续接受客户端的请求，否则，会返回给请求的客户端如下信息“SYNC with master in progress”
slave-read-only yes              # 是否允许slave服务器节点只提供读服务
repl-diskless-sync no            # 主从同步支持两种策略，即Disk-backed(磁盘备份)和Diskless(无磁盘)方式, 默认不使用diskless同步方式。Disk-backed:Redis master创建一个将RDB文件写入磁盘的新进程。之后，文件由父进程递增地传递给从站。 Diskless:Redis主机创建一个新的进程，直接将RDB文件写入从属插槽，而不必接触磁盘。
repl-diskless-sync-delay 5       # 无磁盘diskless方式在进行数据传递之前会有一个时间的延迟，以便slave端能够进行到待传送的目标队列中，这个时间默认是5秒
#repl-ping-slave-period 10       # slave端向server端发送pings的时间区间设置，默认为10秒
#repl-timeout 60                 # 设置复制超时时间 (确保这个值大于对于repl-ping-slave-period指定的值是非常重要的，否则每次主站和从站之间的流量都会被检测到超时。)
repl-disable-tcp-nodelay no      # 指定向slave同步数据时，是否禁用socket的NO_DELAY选项。若配置为“yes”，则禁用NO_DELAY，则TCP协议栈会合并小包统一发送，这样可以减少主从节点间的包数量并节省带宽，但会增加数据同步到slave的时间。若配置为“no”，表明启用NO_DELAY，则TCP协议栈不会延迟小包的发送时机，这样数据同步的延时会减少，但需要更大的带宽。通常情况下，应该配置为no以降低同步延时，但在主从节点间网络负载已经很高的情况下，可以配置为yes。
#repl-backlog-size 1mb           # 设置backlog的大小，backlog是一个缓冲区，在slave端失连时存放要同步到slave的数据，因此当一个slave要重连时，经常是不需要完全同步的，执行局部同步就足够了。backlog设置的越大，slave可以失连的时间就越长。
#repl-backlog-ttl 3600           # 如果一段时间后没有slave连接到master，则backlog size的内存将会被释放。如果值为0则表示永远不释放这部份内存。
slave-priority 100               # 指定slave的优先级。在不只1个slave存在的部署环境下，当master宕机时，Redis Sentinel会将priority值最小的slave提升为master。需要注意的是，若该配置项为0，则对应的slave永远不会自动提升为master。
#min-slaves-to-write 3           # 配置至少有 3个slave连接正常的时候才同步数据。 (redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write，健康的slave的个数小于N，mater就禁止写入。master最少得有多少个健康的slave存活才能执行写命令。这个配置虽然不能保证N个slave都一定能接收到master的写操作，但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。设置为0是关闭该功能。)
#min-slaves-max-lag 10           # 最大延时少于 10s。 (延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。 默认情况下，设置为0（功能禁用）或 设置为10。)
#slave-announce-ip 5.5.5.5       # 此配置的目的在于向master申明自己的ip
#slave-announce-port 1234        # 此配置的目的在于向master申明自己的端口

# 安全配置 ===========================================================================================================================================
requirepass 123456                                              # 可以让用户使用AUTH命令来认证密码，才能使用其他命令。这让redis可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证。使用requirepass的时候需要注意，因为redis太快了，每秒可以认证15w次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码。
#rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52 # 把危险的命令给修改成其他名称。比如CONFIG命令可以重命名为一个很难被猜到的命令，这样用户不能使用，而内部工具还能接着使用。
#rename-command CONFIG ""                                       # 设置成一个空的值，可以禁止这个命令

# 客户端配置 =========================================================================================================================================
#maxclients 10000 # 同一时间内最大clients连接的数量，超过数量的连接会返回一个错误信息

# 内存管理配置 =======================================================================================================================================
#maxmemory <bytes>           # 最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。
#----------------------------# 内存容量超过maxmemory后的处理策略。
                             # volatile-lru：利用LRU算法移除设置过过期时间的key。
                             # volatile-random：随机移除设置过过期时间的key。
#maxmemory-policy noeviction # volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）
                             # allkeys-lru：利用LRU算法移除任何key。
                             # allkeys-random：随机移除任何key。
                             # noeviction：不移除任何key，只是返回一个写错误。
#----------------------------# 上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。redis将不再接收写请求，只接收get请求。写命令包括：set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx exec sort。
#maxmemory-samples 5         # lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择5个key，选出闲置时间最长的key移除。

# 惰性删除（非阻塞删除）配置 =========================================================================================================================
lazyfree-lazy-eviction no   # 内存满逐出选项
lazyfree-lazy-expire no     # 过期key删除选项
lazyfree-lazy-server-del no # 内部删除选项，比如rename oldkey newkey时，如果newkey存在需要删除newkey
slave-lazy-flush no         # slave接收完RDB文件后清空数据选项

# 仅追加模式配置 =====================================================================================================================================
appendonly no                   # 默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。
appendfilename "appendonly.aof" # aof持久化策略的配置
appendfsync everysec            # aof持久化策略的配置。 no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。always表示每次写入都执行fsync，以保证数据同步到磁盘。 everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。
no-appendfsync-on-rewrite no    # 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。
auto-aof-rewrite-percentage 100 # aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。
auto-aof-rewrite-min-size 64mb  # 设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写
aof-load-truncated yes          # aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。
aof-use-rdb-preamble no         # 4.0开始允许使用RDB-AOF混合持久化的方式结合了两者的优点通过aof-use-rdb-preamble配置项可以打开混合开关。

# Lua 脚本 ===========================================================================================================================================
lua-time-limit 5000 # 一个Lua脚本最长的执行时间，单位为毫秒，如果为0或负数表示无限执行时间，默认为5000

# Redis 集群 =========================================================================================================================================
#cluster-enabled yes                 # 集群开关，默认是不开启集群模式。
#cluster-config-file nodes-6379.conf # 集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突
#cluster-node-timeout 15000          # 节点互连超时的阀值。集群节点超时毫秒数
#cluster-slave-validity-factor 10    # 在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。如果设置成０，则无论从节点与主节点失联多久，从节点都会尝试升级成主节
#cluster-migration-barrier 1         # master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。 主节点需要的最小从节点数，只有达到这个数，主节点失败时，它从节点才会进行迁移。
#cluster-require-full-coverage yes   # 默认情况下，集群全部的slot有节点分配，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置，这样会造成分区的时候，小分区的mster一直在接受写请求，而造成很长时间数据不一致。在部分key所在的节点不可用时，如果此参数设置为”yes”(默认值), 则整个集群停止接受操作；如果此参数设置为”no”，则集群依然可以为节点上的key提供读操作

# 集群docker/NAT支持 =================================================================================================================================
#cluster-announce-ip 10.1.1.5   # 集群节点IP
#cluster-announce-port 6379     # 集群节点端口
#cluster-announce-bus-port 6380 # 集群消息总线端口

# 慢日志 =============================================================================================================================================
slowlog-log-slower-than 10000 # slog log是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slow log中，slow log保存在内存中，所以没有IO操作。 执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。
slowlog-max-len 128           # 慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 slowlog reset 来释放内存。

# 延迟监视器 =========================================================================================================================================
latency-monitor-threshold 0 #延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于这个设置的值的操作。0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置。

# 活动通知 ===========================================================================================================================================
                          # 键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。
                          # notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：
                          # K 键空间通知，所有通知以 __keyspace@__ 为前缀
                          # E 键事件通知，所有通知以 __keyevent@__ 为前缀
                          # g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知
                          # $ 字符串命令的通知
                          # l 列表命令的通知
notify-keyspace-events "" # s 集合命令的通知
                          # h 哈希命令的通知
                          # z 有序集合命令的通知
                          # x 过期事件：每当有过期键被删除时发送
                          # e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送
                          # A 参数 g$lshzxe 的别名
                          #
                          # 输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。
                          #
                          # 示例1：要启用列表和通用事件，从事件名称的角度来看，请使用：notify-keyspace-events Elg
                          # 示例2：获取订阅频道名称的过期密钥流__keyevent @ 0 __，过期使用：notify-keyspace-events Ex

# 高级配置 ===========================================================================================================================================
hash-max-ziplist-entries 512                     # 数据量小于等于512的用ziplist，大于512用hash
hash-max-ziplist-value 64                        # value大小小于等于64的用ziplist，大于64用hash
#------------------------------------------------# 设定每个ziplist中的元素个数
                                                 # 后面的数字可正可负，正、负代表不同函数，其中，如果参数为正，表示按照数据项个数来限定每个节点中的元素个数，比如3代表每个节点中存放的元素个数不能超过3；反之，如果参数为负，表示按照字节数来限定每个节点中的元素个数，它只能取-1~-5这五个数，其含义如下：
                                                 # -1 每个节点的ziplist字节大小不能超过4kb
                                                 # -2 每个节点的ziplist字节大小不能超过8kb
list-max-ziplist-size -2                         # -3 每个节点的ziplist字节大小不能超过16kb
                                                 # -4 每个节点的ziplist字节大小不能超过32kb
                                                 # -5 每个节点的ziplist字节大小不能超过64kb
#------------------------------------------------# 在quicklist的源码中提到了一个LZF的压缩算法，该算法用于对quicklist的节点进行压缩操作。list的设计目的是能够存放很长的数据列表，当列表很长时，必然会占用很高的内存空间，且list中最容易访问的是两端的数据，中间的数据访问率较低，于是就可以从这个出发点来进一步节省内存用于其他操作。Redis提供了一下的配置参数，用于表示中间节点是否压缩。
                                                 # 参数list-compress-depth的取值和含义对应如下：
                                                 #
                                                 # 0 特殊值，表示不压缩
list-compress-depth 0                            # 1 表示quicklist两端各有一个节点不压缩，中间的节点压缩
                                                 # 2 表示quicklist两端各有两个节点不压缩，中间的节点压缩
                                                 # 3 表示quicklist两端各有三个节点不压缩，中间的节点压缩
#------------------------------------------------# 以此类推。
set-max-intset-entries 512                       # 数据量小于等于512用iniset，大于512用set。
zset-max-ziplist-entries 128                     # 数据量小于等于128用ziplist，大于128用zset。
zset-max-ziplist-value 64                        # value大小小于等于64用ziplist，大于64用zset。
hll-sparse-max-bytes 3000                        # value大小小于等于3000使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。
activerehashing yes                              # Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。
client-output-buffer-limit normal 0 0 0          # 对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。对于normal client，第一个0表示取消hard limit，第二个0和第三个0表示取消soft limit，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。
client-output-buffer-limit slave 256mb 64mb 60   # 对于slave client和MONITER client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。
client-output-buffer-limit pubsub 32mb 8mb 60    # 对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。
hz 10                                            # redis执行任务的频率为1s除以hz。
aof-rewrite-incremental-fsync yes                # 在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。
-lfu-log-factor 10                               # 计数器对数因子，默认是10。
-lfu-decay-time 1                                # 计数器衰减时间，以分钟为单位，默认值为1，如果设置为0，意味着每次发生扫描时都会使计数器衰减。

# 主动碎片整理 =======================================================================================================================================
#activedefrag yes                  # 启用活动碎片整理
#active-defrag-ignore-bytes 100mb  # 开始进行活动碎片整理的最小碎片资源
#active-defrag-threshold-lower 10  # 开始进行活动碎片整理的最小碎片百分比
#active-defrag-threshold-upper 100 # Redis尽力整理碎片后，最大碎片百分比
#active-defrag-cycle-min 25        # 在CPU百分比最小为多少时，开始进行碎片处理
#active-defrag-cycle-max 75        # Redis尽力整理碎片后，最大的CPU百分比
